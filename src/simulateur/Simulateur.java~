package simulateur;
import destinations.Destination;
import sources.Source;
import sources.SourceAleatoire;
import sources.SourceFixe;
import transmetteurs.*;
import destinations.DestinationFinale;
import information.Information;
import information.InformationNonConformeException;
import visualisations.SondeLogique;
import visualisations.SondeAnalogique;
import visualisations.VueCourbe;
import 

import java.util.ArrayList;
import java.util.List;
import emmetteurs.Emetteur;



/** La classe Simulateur permet de construire et simuler une chaîne de
 * transmission composée d'une Source, d'un nombre variable de
 * Transmetteur(s) et d'une Destination.
 * @author cousin
 * @author prou
 *
 */
public class Simulateur {
      	
    /** indique si le Simulateur utilise des sondes d'affichage */
    private boolean affichage = false;

    /** indique si le Simulateur doit générer les graphiques d'analyse TEB */
    private boolean modeAnalyse = false;

    /** indique si le Simulateur utilise un message généré de manière aléatoire (message imposé sinon) */
    private boolean messageAleatoire = true;
    
    /** indique si le Simulateur utilise un germe pour initialiser les générateurs aléatoires */
    private boolean aleatoireAvecGerme = false;
    
    /** la valeur de la semence utilisée pour les générateurs aléatoires */
    private Integer seed = null; // pas de semence par défaut
    
    /** la longueur du message aléatoire à transmettre si un message n'est pas imposé */
    private int nbBitsMess = 100; 
    
    /** la chaîne de caractères correspondant à m dans l'argument -mess m */
    private String messageString = "100";
   
   	
    /** le  composant Source de la chaine de transmission */
    private Source <Boolean>  source = null;
    
    /** le  composant Transmetteur parfait logique de la chaine de transmission */
    private Transmetteur <Boolean, Float>  transmetteurLogique = null;
    
    /** le  composant Destination de la chaine de transmission */
    private Destination <Boolean>  destination = null;

	/** la conversion numérique à analogique utilisée */
	private String form = "RZ";

	/** le nombre d'échantilllons utilisés */
	private int nEch = 30;

    /** le rapport signal sur bruit SNR utilisé en décibel */
	private Float SNRpB;

    /** Paramètres du canal à trajets multiples */
    private List<Trajet> trajetsMultiples = null;

    private Emetteur emetteur = null;
    private Recepteur recepteur = null;
   	
   
    /** Le constructeur de Simulateur construit une chaîne de
     * transmission composée d'une Source {@code <Boolean>}, d'une Destination
     * {@code <Boolean>}et de Transmetteur(s) [voir la méthode
     * analyseArguments]...  <br> Les différents composants de la
     * chaîne de transmission (Source, Transmetteur(s), Destination,
     * Sonde(s) de visualisation) sont créés et connectés.
     * @param args le tableau des différents arguments.
     *
     * @throws ArgumentsException si un des arguments est incorrect
     * @throws InformationNonConformeException 
     *
     */   
    public  Simulateur(String [] args) throws ArgumentsException, InformationNonConformeException {
    	// analyser et récupérer les arguments   	
    	analyseArguments(args);
      
    	
    	// 1. Create the correct source based on the arguments
        if (messageAleatoire) {
            // Random message
            SourceAleatoire SA = new SourceAleatoire();
            if (aleatoireAvecGerme && seed != null) {
                SA.setSeed(seed);  // assuming you add a setSeed method
            }
            SA.setLength(nbBitsMess);  // assuming you add a setNbBits method
            SA.generer(); 
            source = SA;
        } else {
            // Fixed message
            SourceFixe SF = new SourceFixe();
            SF.generer(messageString);
            source = SF;
        }
    	
        // Création du transmetteur selon les options
        if (trajetsMultiples != null && !trajetsMultiples.isEmpty()) {
            // Canal à trajets multiples et bruité
            if (SNRpB == null) {
                throw new ArgumentsException("Un SNR doit être spécifié avec -snrpb pour utiliser -ti");
            }
            if (aleatoireAvecGerme && seed != null) {
                transmetteurLogique = new TransmetteurMultiTrajet<>(trajetsMultiples, SNRpB, nEch, seed);
            } else {
                transmetteurLogique = new TransmetteurMultiTrajet<>(trajetsMultiples, SNRpB, nEch);
            }
        }
        else if (SNRpB == null) {
            // Canal parfait (pas de bruit)
            transmetteurLogique = new TransmetteurParfait();
        }
        else {
            // Canal simple avec bruit uniquement
            if (aleatoireAvecGerme && seed != null) {
                transmetteurLogique = new TransmetteurImparfait<>(nEch, SNRpB, seed);
            }
            else {
                transmetteurLogique = new TransmetteurImparfait<>(nEch, SNRpB);
            }
        }

        // Créer émetteur et récepteur (toujours nécessaires pour la transmission analogique)
		emetteur = new Emetteur(form, nEch);
        recepteur = new Recepteur(nEch, 0f, form);
        destination = new DestinationFinale();

        SondeLogique sondeSource = new SondeLogique("source",100 );
        SondeAnalogique sondeEmetteur = new SondeAnalogique("émetteur");
        SondeAnalogique sondeTransmetteur = new SondeAnalogique("transmetteur");
        SondeLogique sondeRecepteur = new SondeLogique("récepteur", 100);

        source.connecter(emetteur);
        emetteur.connecter(transmetteurLogique);
        transmetteurLogique.connecter(recepteur);
        recepteur.connecter(destination);
        
        if (affichage) {

            source.connecter(sondeSource);
            emetteur.connecterSonde(sondeEmetteur);
            transmetteurLogique.connecter(sondeTransmetteur);
            recepteur.connecter(sondeRecepteur);
        }
    }
   
   
   
    /** La méthode analyseArguments extrait d'un tableau de chaînes de
     * caractères les différentes options de la simulation.  <br>Elle met
     * à jour les attributs correspondants du Simulateur.
     *
     * @param args le tableau des différents arguments.
     * <br>
     * <br>Les arguments autorisés sont : 
     * <br> 
     * <dl>
     * <dt> -mess m  </dt><dd> m (String) constitué de 7 ou plus digits à 0 | 1, le message à transmettre</dd>
     * <dt> -mess m  </dt><dd> m (int) constitué de 1 à 6 digits, le nombre de bits du message "aléatoire" à transmettre</dd> 
     * <dt> -s </dt><dd> pour demander l'utilisation des sondes d'affichage</dd>
     * <dt> -seed v </dt><dd> v (int) d'initialisation pour les générateurs aléatoires</dd> 
     * </dl>
     *
     * @throws ArgumentsException si un des arguments est incorrect.
     *
     */   
    private  void analyseArguments(String[] args)  throws  ArgumentsException {

    	for (int i=0;i<args.length;i++){ // traiter les arguments 1 par 1

    		if (args[i].matches("-s")){
    			affichage = true;
    		}


    		
    		else if (args[i].matches("-seed")) {
    			aleatoireAvecGerme = true;
    			i++; 
    			try { 
    				seed = Integer.valueOf(args[i]);
    			}
    			catch (Exception e) {
    				throw new ArgumentsException("Valeur du parametre -seed  invalide :" + args[i]);
    			}           		
    		}

    		else if (args[i].matches("-mess")){
    			i++; 
    			// traiter la valeur associee
    			messageString = args[i];
    			if (args[i].matches("[0,1]{7,}")) { // au moins 7 digits
    				messageAleatoire = false;
    				nbBitsMess = args[i].length();
    			} 
    			else if (args[i].matches("[0-9]{1,6}")) { // de 1 à 6 chiffres
    				messageAleatoire = true;
    				nbBitsMess = Integer.valueOf(args[i]);
    				if (nbBitsMess < 1) 
    					throw new ArgumentsException ("Valeur du parametre -mess invalide : " + nbBitsMess);
    			}
    			else 
    				throw new ArgumentsException("Valeur du parametre -mess invalide : " + args[i]);
    		}

			else if (args[i].matches("-form")) {
				i++;
				if (i < args.length) {
					form = args[i];
				} else {
					throw new ArgumentsException("Valeur du parametre -form manquante");
				}
			}

			else if (args[i].matches("-ne")) {
				i++;
				try {
					nEch = Integer.valueOf(args[i]);
				}
				catch (Exception e) {
					throw new ArgumentsException("Valeur du parametre -nbEch invalide :" + args[i]);
				}
			}

            else if (args[i].matches("-snrpb")) {
				i++;
				try {
					SNRpB = Float.valueOf(args[i]);
				}
				catch (Exception e) {
					throw new ArgumentsException("Valeur du parametre -snrpb invalide :" + args[i]);
				}
			}

			else if (args[i].matches("-ti")) {
				// Trajets multiples : lire les couples (dt, ar) jusqu'à 5 max
				trajetsMultiples = new ArrayList<>();
				i++;
				while (i < args.length && !args[i].startsWith("-") && trajetsMultiples.size() < 5) {
					try {
						int dt = Integer.valueOf(args[i]);
						i++;
						if (i >= args.length || args[i].startsWith("-")) {
							throw new ArgumentsException("Valeur ar manquante après dt pour -ti");
						}
						float ar = Float.valueOf(args[i]);
						trajetsMultiples.add(new Trajet(dt, ar));
						i++;
					} catch (NumberFormatException e) {
						throw new ArgumentsException("Valeurs invalides pour -ti : " + args[i-1]);
					}
				}
				i--; // Compenser le i++ du for
				if (trajetsMultiples.isEmpty()) {
					throw new ArgumentsException("Au moins un couple (dt, ar) requis pour -ti");
				}
			}



    		else throw new ArgumentsException("Option invalide :"+ args[i]);
    	}
      
    }
     
    
   	
    /** La méthode execute effectue un envoi de message par la source
     * de la chaîne de transmission du Simulateur.
     *
     * @throws Exception si un problème survient lors de l'exécution
     *
     */ 
    public void execute() throws Exception {

    	source.emettre();
		System.err.println("DEBUG: Source a émis " + source.getInformationEmise().nbElements() + " bits");
		System.err.println("DEBUG: Premiers bits source: " + source.getInformationEmise().iemeElement(0) + " " + source.getInformationEmise().iemeElement(1) + " " + source.getInformationEmise().iemeElement(2));
		System.err.println("DEBUG: Emetteur a généré " + emetteur.getInformationEmise().nbElements() + " échantillons");

        // emetteur émet automatiquement vers transmetteur dans recevoir()
        transmetteurLogique.emettre();
		System.err.println("DEBUG: Transmetteur a émis " + transmetteurLogique.getInformationEmise().nbElements() + " échantillons");

        // transmetteur émet vers recepteur
		System.err.println("DEBUG: Signal transmetteur premiers échantillons: " + transmetteurLogique.getInformationAnalogEmise().iemeElement(0) + " " + transmetteurLogique.getInformationAnalogEmise().iemeElement(1) + " " + transmetteurLogique.getInformationAnalogEmise().iemeElement(2));
		System.err.println("DEBUG: Signal emetteur premiers échantillons: " + emetteur.getInformationEmise().iemeElement(0) + " " + emetteur.getInformationEmise().iemeElement(1) + " " + emetteur.getInformationEmise().iemeElement(2));
        recepteur.recevoir(transmetteurLogique.getInformationAnalogEmise());
        recepteur.emettre();
		System.err.println("DEBUG: Recepteur a émis " + recepteur.getInformationEmise().nbElements() + " bits");
		System.err.println("DEBUG: Premiers bits recepteur: " + recepteur.getInformationEmise().iemeElement(0) + " " + recepteur.getInformationEmise().iemeElement(1) + " " + recepteur.getInformationEmise().iemeElement(2));
        // recepteur émet vers destination

        System.out.println(destination.getInformationRecue());

    }
   
   	   	
   	
    /**
     * Retourne si le mode affichage est activé
     * @return true si l'affichage est activé
     */
    public boolean isAffichageActive() {
        return affichage;
    }

    /** La méthode qui calcule le taux d'erreur binaire en comparant
     * les bits du message émis avec ceux du message reçu.
     *
     * @return  La valeur du Taux dErreur Binaire.
     */
    public float  calculTauxErreurBinaire() {
    	Information<Boolean> infoEmise = source.getInformationEmise();
    	Information<Boolean> infoRecue = destination.getInformationRecue();

		int size = Math.min(infoEmise.nbElements(), infoRecue.nbElements());
		int error = 0;

		// Debug
		System.err.println("DEBUG: Taille émise = " + infoEmise.nbElements());
		System.err.println("DEBUG: Taille reçue = " + infoRecue.nbElements());
		System.err.println("DEBUG: Comparaison sur " + size + " bits");

		for (int i = 0; i < size; i++) {
			Boolean emis = infoEmise.iemeElement(i);
			Boolean recu = infoRecue.iemeElement(i);
			if (!emis.equals(recu)) {
				error++;
				if (error <= 5) { // Afficher les 5 premières erreurs
					System.err.println("DEBUG: Erreur bit " + i + " : émis=" + emis + " reçu=" + recu);
				}
			}
		}
		System.err.println("DEBUG: Nombre d'erreurs = " + error);
		return (float) error / size;
	}


   
   
   
   
    /** La fonction main instancie un Simulateur à l'aide des
     *  arguments paramètres et affiche le résultat de l'exécution
     *  d'une transmission.
     *  @param args les différents arguments qui serviront à l'instanciation du Simulateur.
     */
    public static void main(String [] args) { 

    	Simulateur simulateur = null;

    	try {
    		simulateur = new Simulateur(args);
    	}
    	catch (Exception e) {
    		System.out.println(e); 
    		System.exit(-1);
    	} 

    	try {
    		simulateur.execute();
    		String s = "java  Simulateur  ";
    		for (int i = 0; i < args.length; i++) { //copier tous les paramètres de simulation
    			s += args[i] + "  ";
    		}
    		System.out.println(s + "  =>   TEB : " + simulateur.calculTauxErreurBinaire());

    		// Générer les graphiques d'analyse TEB si affichage activé
    		if (simulateur.isAffichageActive()) {
    			// Utiliser SNR = 10dB par défaut si pas de bruit dans la simulation
    			float snr = (simulateur.SNRpB != null) ? simulateur.SNRpB : 10.0f;
    			AnalyseTEB.genererGraphiques(simulateur.nbBitsMess, simulateur.nEch,
    			                             snr, simulateur.form, simulateur.seed, simulateur.trajetsMultiples);
    		}
    	}
    	catch (Exception e) {
    		System.out.println(e);
    		e.printStackTrace();
    		System.exit(-2);
    	}
    }
}

